{"name":"Cross-console","tagline":"A console approach to make sure console is available and can be stifled under the right situations.","body":"# Cross-Console script\r\nSometimes you just need to control the console. This script provides you with a way to control and take advantage of your console for what it was meant to do (log stuff). Leave the debugging to your breakpoints, start logging your code!\r\n\r\n# Install\r\n\r\n## Via bower\r\n```\r\nbower install cross-console\r\n```\r\n\r\n## Via NPM\r\n```\r\nnpm install cross-console\r\n```\r\n\r\n## Download Manually\r\n\r\n* Download the files using the GitHub .zip download option\r\n* Use either the compressed `bin/cross-console.min.js` or the `lib/cross-console.js` file.\r\n\r\n\r\n# Features\r\n - attempts to implements console in all environments\r\n - allows environment differences. While in 'production' console is disabled. This keeps errant `window.console` from breaking a page or showing up to a user.\r\n - creates the ability to send console.error to another Function while in production (for easier error management like sending an email)\r\n\r\n# Settings\r\nTo change from the default settings, just access the code via the window or root object.\r\n```js\r\nwindow.cconsole.settings\r\n```\r\n\r\n## `window.cconsole.settings.standBy`\r\n>default `false` ( boolean )\r\n\r\nStand By will effectively turn off CConsole. It will act as if it was not even there.\r\n\r\n## `window.cconsole.settings.debug`\r\n>default `false` ( boolean )\r\n\r\nDebug turns on all logs so that the console will light up with everything that is thrown at it.\r\n\r\n## `window.cconsole.settings.environment`\r\n>default `production` ( string: `development` || `production` )\r\n\r\nThis is the smartest addition to the code. Effectively, you can be in 'development' mode to be able to see all `console.error` and `console.warn` come through. If you are in `production` mode you will not see anything. If debug is on, it will overwrite this setting and allow everything to come through.\r\n\r\n## `window.cconsole.settings.notify`\r\n>default `function(error, identifier) { return; }` ( function )\r\n\r\nYou can overwrite this functionality in your own code. This function will be called for every `console.error` that occurs. This allows you to have a second set of loggin occur on that error, like a server backend to track them or graph them, etc.\r\n\r\n - error : this is the string that was given to console.error\r\n - identifier : this is intended to be a line item that is unique to this error, to make for easier debugging.\r\n\r\n# License\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2013 Drew@geedew.com \r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"UA-9101805-1","note":"Don't delete this file! It's used internally to help with page regeneration."}